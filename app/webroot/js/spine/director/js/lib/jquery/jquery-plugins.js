// Generated by CoffeeScript 1.6.3
(function() {
  var $, Timer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = typeof jQuery !== "undefined" && jQuery !== null ? jQuery : require("jqueryify");

  $.fn.deselect = function(sel) {
    return $(this).children(sel).removeClass('active hot');
  };

  $.extend(jQuery.tmpl.tag, {
    "for": {
      _default: {
        $2: "var i=1;i<=1;i++"
      },
      open: 'for ($2){',
      close: '};'
    }
  });

  $.fn.isFormElement = function(o) {
    var formElements, str;
    if (o == null) {
      o = [];
    }
    str = Object.prototype.toString.call(o[0]);
    formElements = ['[object HTMLInputElement]', '[object HTMLTextAreaElement]'];
    return formElements.indexOf(str) !== -1;
  };

  $.fn.state = function(state) {
    var d;
    d = 'disabled';
    return this.each(function() {
      var $this;
      $this = $(this);
      $this.html($this.data()[state]);
      if (state === 'loading') {
        return $this.addClass(d).attr(d, d);
      } else {
        return $this.removeClass(d).removeAttr(d);
      }
    });
  };

  $.Timer_ = function(interval, calls, onend) {
    var callback, count, end, payload, startTime, timer;
    count = 0;
    payload = this;
    startTime = new Date();
    callback = function() {
      return payload(startTime, count);
    };
    end = function() {
      if (onend) {
        return onend(startTime, count, calls);
      }
    };
    timer = function() {
      count++;
      if (count < calls && callback()) {
        return window.setTimeout(timer, interval);
      } else {
        return end();
      }
    };
    return timer();
  };

  Timer = (function(_super) {
    __extends(Timer, _super);

    function Timer(interval, calls, onend) {
      this.stop = __bind(this.stop, this);
      Timer.__super__.constructor.apply(this, arguments);
    }

    Timer.prototype.start = function() {
      var d;
      d = new Date();
      this.startTime = this.now();
      return this;
    };

    Timer.prototype.now = function() {
      return new Date().getTime();
    };

    Timer.prototype.stop = function() {
      var now;
      now = this.now();
      return {
        started: this.startTime,
        ended: now,
        s: (now - this.startTime) / 1000,
        ms: now - this.startTime
      };
    };

    return Timer;

  })(Object);

}).call(this);
