// Generated by CoffeeScript 1.6.3
(function() {
  var $, Album, AlbumsPhoto, Drag, Extender, GalleriesAlbum, Gallery, SidebarList, Spine,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Spine = require("spine");

  $ = Spine.$;

  Album = require('models/album');

  Gallery = require('models/gallery');

  AlbumsPhoto = require('models/albums_photo');

  GalleriesAlbum = require('models/galleries_album');

  Drag = require("plugins/drag");

  Extender = require('plugins/controller_extender');

  require("plugins/tmpl");

  SidebarList = (function(_super) {
    __extends(SidebarList, _super);

    SidebarList.extend(Drag);

    SidebarList.extend(Extender);

    SidebarList.prototype.elements = {
      '.gal.item': 'item'
    };

    SidebarList.prototype.events = {
      "click      .item": 'click',
      "click      .expander": 'clickExpander'
    };

    SidebarList.prototype.selectFirst = true;

    SidebarList.prototype.contentTemplate = function(items) {
      return $('#sidebarContentTemplate').tmpl(items);
    };

    SidebarList.prototype.sublistTemplate = function(items) {
      return $('#albumsSublistTemplate').tmpl(items);
    };

    SidebarList.prototype.ctaTemplate = function(item) {
      return $('#ctaTemplate').tmpl(item);
    };

    function SidebarList() {
      this.change = __bind(this.change, this);
      SidebarList.__super__.constructor.apply(this, arguments);
      Gallery.bind('collection:changed', this.proxy(this.renderGallery));
      Album.bind('collection:changed', this.proxy(this.renderAlbum));
      Gallery.bind('change', this.proxy(this.change));
      Album.bind('create destroy update', this.proxy(this.renderSublists));
      Gallery.bind('change:selection', this.proxy(this.exposeSublistSelection));
      Gallery.bind('current', this.proxy(this.exposeSelection));
      Gallery.bind('current', this.proxy(this.scrollTo));
      Album.bind('current', this.proxy(this.scrollTo));
    }

    SidebarList.prototype.template = function() {
      return arguments[0];
    };

    SidebarList.prototype.change = function(item, mode, e) {
      console.log('SidebarList::change');
      switch (mode) {
        case 'create':
          this.current = item;
          this.create(item);
          return this.exposeSelection(item);
        case 'update':
          this.current = item;
          return this.update(item);
        case 'destroy':
          this.current = false;
          return this.destroy(item);
      }
    };

    SidebarList.prototype.create = function(item) {
      this.append(this.template(item));
      return this.reorder(item);
    };

    SidebarList.prototype.update = function(item) {
      this.updateTemplate(item);
      return this.reorder(item);
    };

    SidebarList.prototype.destroy = function(item) {
      return this.children().forItem(item, true).detach();
    };

    SidebarList.prototype.render = function(items, mode) {
      var galleryEl, item, _i, _len;
      console.log('SidebarList::render');
      this.children().addClass('invalid');
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        galleryEl = this.children().forItem(item);
        if (!galleryEl.length) {
          this.append(this.template(item));
          this.reorder(item);
        } else {
          this.updateTemplate(item).removeClass('invalid');
        }
        this.renderOneSublist(item);
      }
      return this.children('.invalid').remove();
    };

    SidebarList.prototype.reorder = function(item) {
      var children, id, idxAfterSort, idxBeforeSort, index, newEl, oldEl;
      console.log('SidebarList::reorder');
      id = item.id;
      index = function(id, list) {
        var i, itm, _i, _len;
        for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
          itm = list[i];
          if (itm.id === id) {
            return i;
          }
        }
        return i;
      };
      children = this.children();
      oldEl = this.children().forItem(item);
      idxBeforeSort = this.children().index(oldEl);
      idxAfterSort = index(id, Gallery.all().sort(Gallery.nameSort));
      newEl = $(children[idxAfterSort]);
      if (idxBeforeSort < idxAfterSort) {
        return newEl.after(oldEl);
      } else if (idxBeforeSort > idxAfterSort) {
        return newEl.before(oldEl);
      }
    };

    SidebarList.prototype.updateSublist = function(ga) {
      var gallery;
      gallery = Gallery.exists(ga.gallery_id);
      return this.renderOneSublist(gallery);
    };

    SidebarList.prototype.renderAllSublist = function() {
      var gal, index, _i, _len, _ref, _results;
      console.log('SidebarList::renderAllSublist');
      _ref = Gallery.records;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        gal = _ref[index];
        _results.push(this.renderOneSublist(gal));
      }
      return _results;
    };

    SidebarList.prototype.renderSublists = function(album) {
      var ga, gallery, gas, _i, _len, _results;
      console.log('SidebarList::renderSublists');
      gas = GalleriesAlbum.filter(album.id, {
        key: 'album_id'
      });
      _results = [];
      for (_i = 0, _len = gas.length; _i < _len; _i++) {
        ga = gas[_i];
        if (gallery = Gallery.exists(ga.gallery_id)) {
          _results.push(this.renderOneSublist(gallery));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    SidebarList.prototype.renderOneSublist = function(gallery) {
      var album, albums, filterOptions, galleryEl, gallerySublist, _i, _len;
      if (gallery == null) {
        gallery = Gallery.record;
      }
      console.log('SidebarList::renderOneSublist');
      filterOptions = {
        model: 'Gallery',
        key: 'gallery_id',
        sorted: 'sortByOrder'
      };
      albums = Album.filterRelated(gallery.id, filterOptions);
      for (_i = 0, _len = albums.length; _i < _len; _i++) {
        album = albums[_i];
        album.count = AlbumsPhoto.filter(album.id, {
          key: 'album_id'
        }).length;
      }
      if (!albums.length) {
        albums.push({
          flash: ' '
        });
      }
      galleryEl = this.children().forItem(gallery);
      gallerySublist = $('ul', galleryEl);
      gallerySublist.html(this.sublistTemplate(albums));
      gallerySublist.sortable('album');
      return this.exposeSublistSelection(gallery);
    };

    SidebarList.prototype.updateTemplate = function(item) {
      var e, galleryContentEl, galleryEl, tmplItem;
      console.log('SidebarList::updateTemplate');
      galleryEl = this.children().forItem(item);
      galleryContentEl = $('.item-content', galleryEl);
      tmplItem = galleryContentEl.tmplItem();
      tmplItem.tmpl = $("#sidebarContentTemplate").template();
      try {
        tmplItem.update();
      } catch (_error) {
        e = _error;
      }
      return galleryEl;
    };

    SidebarList.prototype.renderItemFromGalleriesAlbum = function(ga, mode) {
      var gallery;
      gallery = Gallery.exists(ga.gallery_id);
      if (gallery) {
        this.updateTemplate(gallery);
        return this.renderOneSublist(gallery);
      }
    };

    SidebarList.prototype.renderGallery = function(item) {
      this.updateTemplate(item);
      return this.renderOneSublist(item);
    };

    SidebarList.prototype.renderAlbum = function(item) {
      var ga, gallery, gas, _i, _len, _results;
      gas = GalleriesAlbum.filter(item.id, {
        key: 'album_id'
      });
      _results = [];
      for (_i = 0, _len = gas.length; _i < _len; _i++) {
        ga = gas[_i];
        if (gallery = Gallery.exists(ga.gallery_id)) {
          _results.push(this.renderGallery(gallery));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    SidebarList.prototype.renderItemFromAlbumsPhoto = function(ap) {
      var ga, gas, _i, _len, _results;
      console.log('SidebarList::renderItemFromAlbumsPhoto');
      gas = GalleriesAlbum.filter(ap.album_id, {
        key: 'album_id'
      });
      _results = [];
      for (_i = 0, _len = gas.length; _i < _len; _i++) {
        ga = gas[_i];
        _results.push(this.renderItemFromGalleriesAlbum(ga));
      }
      return _results;
    };

    SidebarList.prototype.exposeSelection = function(item) {
      item = item || Gallery.record;
      this.children().removeClass('active');
      if (item) {
        return this.children().forItem(item).addClass("active");
      }
    };

    SidebarList.prototype.exposeSublistSelection = function(item) {
      var activeAlbum, activeEl, album, albumsEl, first, galleryEl, id, selection, _i, _len;
      item = item || Gallery.record;
      if (item) {
        selection = item.selectionList();
        galleryEl = this.children().forItem(item);
        albumsEl = galleryEl.find('li');
        albumsEl.removeClass('selected active');
        $('.glyphicon', galleryEl).removeClass('glyphicon-folder-open');
        for (_i = 0, _len = selection.length; _i < _len; _i++) {
          id = selection[_i];
          if (album = Album.exists(id)) {
            albumsEl.forItem(album).addClass('selected');
          }
        }
        if (activeAlbum = Album.exists(first = selection.first())) {
          activeEl = albumsEl.forItem(activeAlbum).addClass('active');
          $('.glyphicon', activeEl).addClass('glyphicon-folder-open');
        }
      }
      return this.refreshElements();
    };

    SidebarList.prototype.click = function(e) {
      var el, gallery, item, _ref;
      el = $(e.target).closest('li');
      item = el.item();
      switch (item.constructor.className) {
        case 'Gallery':
          this.expand(item, ((_ref = App.showView.controller) != null ? _ref.el.data('current').models : void 0) !== Album);
          this.navigate('/gallery', item.id);
          if (Gallery.record && Gallery.record.id === item.id) {
            return Gallery.current(item.id);
          }
          break;
        case 'Album':
          gallery = $(e.target).closest('li.gal').item();
          this.navigate('/gallery', gallery.id, item.id);
          if (Album.record && Album.record.id === item.id) {
            return Album.current(item.id);
          }
      }
    };

    SidebarList.prototype.expand = function(item, force, e) {
      var closeif, expander, galleryEl, open, targetIsExpander;
      galleryEl = this.galleryFromItem(item);
      expander = $('.expander', galleryEl);
      if (e) {
        targetIsExpander = $(e.currentTarget).hasClass('expander');
      }
      if (force) {
        return this.openSublist(galleryEl);
      } else {
        open = galleryEl.hasClass('open');
        closeif = galleryEl.hasClass('active') || targetIsExpander;
        if (open) {
          if (closeif) {
            return this.closeSublist(galleryEl);
          }
        } else {
          return this.openSublist(galleryEl);
        }
      }
    };

    SidebarList.prototype.openSublist = function(el) {
      return el.addClass('open');
    };

    SidebarList.prototype.closeSublist = function(el) {
      return el.removeClass('open');
    };

    SidebarList.prototype.closeAllSublists = function(item) {
      var gallery, parentEl, _i, _len, _ref, _results;
      _ref = Gallery.all();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gallery = _ref[_i];
        parentEl = this.galleryFromItem(gallery);
        if (!parentEl.hasClass('manual')) {
          _results.push(this.expand(gallery, (item != null ? item.id : void 0) === gallery.id));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    SidebarList.prototype.clickExpander = function(e) {
      var galleryEl, item;
      galleryEl = $(e.target).closest('li.gal');
      item = galleryEl.item();
      if (item) {
        this.expand(item, false, e);
      }
      e.stopPropagation();
      return e.preventDefault();
    };

    SidebarList.prototype.galleryFromItem = function(item) {
      return this.children().forItem(item);
    };

    SidebarList.prototype.close = function() {};

    SidebarList.prototype.show = function(e) {
      App.contentManager.change(App.showView);
      e.stopPropagation();
      return e.preventDefault();
    };

    SidebarList.prototype.scrollTo = function(item) {
      var a, el, margin, o, p, r, speed, ul;
      if (!(item && Gallery.record)) {
        return;
      }
      margin = 50;
      el = this.children().forItem(Gallery.record);
      speed = 300;
      if (item.constructor.className === 'Album') {
        ul = $('ul', el);
        el = $('li', ul).forItem(item);
        speed = 1000;
      }
      p = el.offset().top;
      a = this.el.scrollTop();
      o = this.el.offset().top;
      r = a + p - (o + margin);
      return this.el.animate({
        scrollTop: r
      }, {
        queue: false,
        duration: speed
      });
    };

    return SidebarList;

  })(Spine.Controller);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = SidebarList;
  }

}).call(this);
